{"version":3,"file":"react-polygon-image-cropper.es.js","sources":["../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/jsx-runtime.js","../react/jsx-runtime","../src/components/Handle/Handle.tsx","../src/utils/index.ts","../src/components/Canvas/Canvas.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import * as jsxRuntime from \"/Users/gabriela/Projects/react-polygon-image-cropper/node_modules/react/jsx-runtime.js\"\nexport const jsx = jsxRuntime.jsx\nexport const jsxs = jsxRuntime.jsxs\nexport const Fragment = jsxRuntime.Fragment","import React, { useRef, useState } from 'react';\nimport './Handle.css';\n\nexport interface HandleProps {\n  x: number;\n  y: number;\n  radius: number;\n  color: string;\n}\n\ninterface ComponentProps extends HandleProps {\n  idx: number;\n  updateHandles: (idx: number, x: number, y: number) => void;\n  draggable: boolean;\n  cropCanvasRef: React.RefObject<HTMLCanvasElement>;\n}\nexport const Handle = ({\n  idx,\n  updateHandles,\n  draggable,\n  cropCanvasRef,\n  x,\n  y,\n  radius,\n  color,\n}: ComponentProps) => {\n  const [center, setCenter] = useState({\n    x: x - radius / 2,\n    y: y - radius / 2,\n  });\n\n  const calculateNewHandlePosition = (e: React.MouseEvent<HTMLDivElement>) => {\n    const rect = cropCanvasRef?.current?.getBoundingClientRect();\n    let newX = e.clientX;\n    let newY = e.clientY;\n    if (rect) {\n      newX -= rect.left;\n      newY -= rect.top;\n    }\n    updateHandles(idx, newX, newY);\n    setCenter({ x: newX - radius / 2, y: newY - radius / 2 });\n  };\n\n  const handleDrag = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    calculateNewHandlePosition(e);\n  };\n\n  const handleDragEnd = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    calculateNewHandlePosition(e);\n  };\n\n  return (\n    <div\n      draggable={`${draggable}`}\n      onDrag={handleDrag}\n      onDragStart={(e) => !draggable && e.preventDefault()}\n      onDragEnd={handleDragEnd}\n      className=\"handle\"\n      style={{\n        top: center.y,\n        left: center.x,\n        width: radius,\n        height: radius,\n        backgroundColor: color,\n      }}></div>\n  );\n};\n","import { HandleProps } from '../components/Handle/Handle';\n\nexport function drawLine(handles: Array<HandleProps>, idx: number, ctx: any) {\n  ctx.beginPath();\n  ctx.moveTo(handles[idx].x, handles[idx].y);\n  if (idx === handles.length - 1) {\n    ctx.lineTo(handles[0].x, handles[0].y);\n  } else {\n    ctx.lineTo(handles[idx + 1].x, handles[idx + 1].y);\n  }\n  ctx.stroke();\n}\n\nexport function checkProximity(\n  handles: Array<HandleProps>,\n  handle: { x: number; y: number },\n  proximity: number\n) {\n  const near = handles.filter(\n    (pos) =>\n      Math.abs(pos.x - handle.x) < proximity &&\n      Math.abs(pos.y - handle.y) < proximity\n  );\n  if (near.length > 0) return true;\n\n  return false;\n}\n\nexport function cropImage(\n  imageCanvasRef: React.RefObject<HTMLCanvasElement>,\n  cropCanvasRef: React.RefObject<HTMLCanvasElement>,\n  handles: Array<HandleProps>\n) {\n  if (cropCanvasRef.current && imageCanvasRef.current) {\n    const imageCtx = imageCanvasRef.current.getContext('2d');\n    const ctx = cropCanvasRef.current.getContext('2d');\n    if (ctx && imageCtx) {\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      ctx.save();\n      ctx.beginPath();\n      handles.forEach((_, idx) => {\n        if (idx === handles.length - 1) {\n          ctx.lineTo(handles[0].x, handles[0].y);\n        } else {\n          ctx.lineTo(handles[idx + 1].x, handles[idx + 1].y);\n        }\n      });\n      ctx.clip();\n      ctx.drawImage(\n        imageCtx.canvas,\n        0,\n        0,\n        imageCtx.canvas.width,\n        imageCtx.canvas.height,\n        0,\n        0,\n        ctx.canvas.width,\n        ctx.canvas.height\n      );\n      ctx.restore();\n    }\n  }\n}\n\nexport function redrawCropped(\n  handles: Array<HandleProps>,\n  cropCanvasRef: React.RefObject<HTMLCanvasElement>,\n  finalCanvasRef: React.RefObject<HTMLCanvasElement>\n) {\n  if (finalCanvasRef.current && cropCanvasRef.current) {\n    const maxWidth = Math.max.apply(\n      null,\n      handles.map((pos) => pos.x)\n    );\n    const minWidth = Math.min.apply(\n      null,\n      handles.map((pos) => pos.x)\n    );\n    const maxHeight = Math.max.apply(\n      null,\n      handles.map((pos) => pos.y)\n    );\n    const minHeight = Math.min.apply(\n      null,\n      handles.map((pos) => pos.y)\n    );\n    const finalWidth = maxWidth - minWidth;\n    const finalHeight = maxHeight - minHeight;\n\n    const finalCanvas = finalCanvasRef.current;\n    const cropCanvas = cropCanvasRef.current;\n\n    finalCanvas.width = finalWidth;\n    finalCanvas.height = finalHeight;\n    const finalCtx = finalCanvas.getContext('2d');\n    finalCtx?.drawImage(\n      cropCanvas,\n      minWidth,\n      minHeight,\n      finalWidth,\n      finalHeight,\n      0,\n      0,\n      finalWidth,\n      finalHeight\n    );\n    clearCanvas(cropCanvasRef);\n  }\n}\n\nexport function clearCanvas(canvasRef: React.RefObject<HTMLCanvasElement>) {\n  if (canvasRef.current) {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx?.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  }\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Handle, HandleProps } from '../Handle/Handle';\nimport './Canvas.css';\nimport {\n  checkProximity,\n  clearCanvas,\n  cropImage,\n  drawLine,\n  redrawCropped,\n} from '../../utils';\n\ntype CustomCallbackProps = (\n  imageCanvasRef: React.RefObject<HTMLCanvasElement>,\n  cropCanvasRef: React.RefObject<HTMLCanvasElement>,\n  finalCanvasRef: React.RefObject<HTMLCanvasElement>\n) => unknown;\n\ninterface EventListenerProps {\n  elementRef: React.RefObject<HTMLElement>;\n  eventType: string;\n}\n\ninterface SaveProps {\n  saveRef: React.RefObject<HTMLElement>;\n  saveCallback: (imageUrl: string) => any;\n}\n\ninterface CanvasProps {\n  width: number;\n  height: number;\n  source: string;\n  radius: number;\n  color: string;\n  draggable?: boolean;\n  proximity?: number;\n  cropEvent?: EventListenerProps;\n  resetEvent?: EventListenerProps;\n  rescaleEvent?: EventListenerProps;\n  saveProps?: SaveProps;\n  styles?: React.CSSProperties;\n  customCallback?: CustomCallbackProps;\n}\n\nconst Canvas = ({\n  width,\n  height,\n  source,\n  radius,\n  color,\n  draggable = true,\n  proximity,\n  cropEvent,\n  resetEvent,\n  rescaleEvent,\n  saveProps,\n  styles,\n  customCallback,\n}: CanvasProps) => {\n  const imageCanvasRef = useRef<HTMLCanvasElement>(null);\n  const cropCanvasRef = useRef<HTMLCanvasElement>(null);\n  const finalCanvasRef = useRef<HTMLCanvasElement>(null);\n  const [handles, setHandles] = useState<Array<HandleProps>>([]);\n  const [cropped, setCropped] = useState(false);\n  const [scaled, setScaled] = useState(false);\n\n  useEffect(() => {\n    if (customCallback) {\n      customCallback(imageCanvasRef, cropCanvasRef, finalCanvasRef);\n    }\n  }, []);\n\n  useEffect(() => {\n    const handleCrop = () => {\n      cropImage(imageCanvasRef, cropCanvasRef, handles);\n      setCropped(true);\n    };\n    const cropRef = cropEvent?.elementRef;\n    if (cropRef && cropRef.current) {\n      cropRef.current.addEventListener('click', handleCrop);\n    }\n    return () => cropRef?.current?.removeEventListener('click', handleCrop);\n  }, [cropEvent, handles]);\n\n  useEffect(() => {\n    const handleReset = () => {\n      clearCanvas(cropCanvasRef);\n      clearCanvas(finalCanvasRef);\n      setHandles([]);\n      setCropped(false);\n      setScaled(false);\n    };\n    const resetRef = resetEvent?.elementRef;\n    if (resetRef && resetRef.current) {\n      resetRef.current.addEventListener('click', handleReset);\n    }\n    return () => resetRef?.current?.removeEventListener('click', handleReset);\n  }, [resetEvent]);\n\n  useEffect(() => {\n    const handleScale = () => {\n      if (!scaled) {\n        redrawCropped(handles, cropCanvasRef, finalCanvasRef);\n        setHandles([]);\n        setScaled(true);\n      }\n    };\n    const rescaleRef = rescaleEvent?.elementRef;\n    if (rescaleRef && rescaleRef.current) {\n      rescaleRef.current.addEventListener('click', handleScale);\n    }\n    return () => rescaleRef?.current?.removeEventListener('click', handleScale);\n  }, [rescaleEvent, handles, scaled]);\n\n  useEffect(() => {\n    if (saveProps) {\n      const saveRef = saveProps.saveRef;\n      const handleSave = () => {\n        const imageUrl = finalCanvasRef.current?.toDataURL('image/png');\n        if (imageUrl) {\n          saveProps.saveCallback(imageUrl);\n        }\n      };\n      if (saveRef && saveRef.current) {\n        saveRef.current.addEventListener('click', handleSave);\n      }\n\n      return () => saveRef?.current?.removeEventListener('click', handleSave);\n    }\n  }, [saveProps]);\n\n  useEffect(() => {\n    const canvas = imageCanvasRef.current;\n    if (canvas) {\n      canvas.width = width * window.devicePixelRatio;\n      canvas.height = height * window.devicePixelRatio;\n      const context = canvas.getContext('2d');\n      if (context) {\n        const image = new Image();\n        image.onload = function () {\n          context.imageSmoothingEnabled = false;\n          context.drawImage(\n            image,\n            0,\n            0,\n            image.width * window.devicePixelRatio,\n            image.height * window.devicePixelRatio,\n            0,\n            0,\n            canvas.width,\n            canvas.height\n          );\n        };\n        image.src = source;\n      }\n    }\n\n    const handleCanvas = cropCanvasRef.current;\n    if (handleCanvas) {\n      handleCanvas.width = width;\n      handleCanvas.height = height;\n    }\n  }, [source]);\n\n  useEffect(() => {\n    const cropCanvas = cropCanvasRef.current;\n    if (cropCanvas) {\n      const cropContext = cropCanvas.getContext('2d');\n      if (cropped) {\n        cropImage(imageCanvasRef, cropCanvasRef, handles);\n      } else {\n        cropContext?.clearRect(0, 0, cropCanvas.width, cropCanvas.height);\n        handles.forEach((_, idx) => drawLine(handles, idx, cropContext));\n      }\n    }\n  }, [handles, cropped]);\n\n  const handleClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    e.preventDefault();\n    const cropCanvas = cropCanvasRef.current;\n    if (cropCanvas) {\n      const rect = cropCanvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      if (\n        !checkProximity(handles, { x: x, y: y }, proximity || 0) &&\n        !cropped\n      ) {\n        setHandles((prev) => [\n          ...prev,\n          { x: x, y: y, radius: radius, color: color },\n        ]);\n      }\n    }\n  };\n\n  const updateHandles = (idx: number, x: number, y: number) => {\n    const handlesCopy = Array.from(handles);\n    handlesCopy[idx] = { ...handlesCopy[idx], x: x, y: y };\n    setHandles(handlesCopy);\n  };\n\n  return (\n    <div\n      className=\"react-polygon-bounding-box\"\n      style={{ height: height, width: width, ...styles }}>\n      <canvas\n        style={{ height: height, width: width }}\n        className=\"react-polygon-image-canvas\"\n        hidden={cropped}\n        ref={imageCanvasRef}\n      />\n      <canvas\n        style={{ height: height, width: width }}\n        className=\"react-polygon-crop-canvas\"\n        ref={cropCanvasRef}\n        onClick={handleClick}\n      />\n      <canvas className=\"react-polygon-final-canvas\" ref={finalCanvasRef} />\n      {handles.map((handle, idx) => (\n        <Handle\n          key={idx}\n          idx={idx}\n          {...handle}\n          updateHandles={updateHandles}\n          draggable={draggable}\n          cropCanvasRef={cropCanvasRef}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Canvas;\n"],"names":["jsxRuntimeModule","require$$0","jsxRuntime.jsx","jsxRuntime.jsxs","Handle","idx","updateHandles","draggable","cropCanvasRef","x","y","radius","color","center","setCenter","useState","calculateNewHandlePosition","e","rect","current","getBoundingClientRect","newX","clientX","newY","clientY","left","top","handleDrag","preventDefault","handleDragEnd","width","height","backgroundColor","Canvas","source","proximity","cropEvent","resetEvent","rescaleEvent","saveProps","styles","customCallback","imageCanvasRef","useRef","finalCanvasRef","handles","setHandles","cropped","setCropped","scaled","setScaled","useEffect","handleCrop","cropRef","elementRef","addEventListener","removeEventListener","handleReset","clearCanvas","resetRef","handleScale","rescaleRef","saveRef","handleSave","imageUrl","toDataURL","saveCallback","canvas","window","devicePixelRatio","context","getContext","image","Image","onload","imageSmoothingEnabled","drawImage","src","handleCanvas","cropCanvas","cropContext","clearRect","forEach","_","drawLine","handleClick","checkProximity","prev","handlesCopy","Array","from","_jsx","map","handle"],"mappings":"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"}