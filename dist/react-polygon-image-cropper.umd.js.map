{"version":3,"file":"react-polygon-image-cropper.umd.js","sources":["../src/utils/index.ts","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/jsx-runtime.js","../react/jsx-runtime","../src/components/Handle/Handle.tsx","../src/components/Canvas/Canvas.tsx"],"sourcesContent":["import { HandleProps } from '../components/Handle/Handle';\n\nexport function drawLine(handles: Array<HandleProps>, idx: number, ctx: any) {\n  ctx.beginPath();\n  ctx.moveTo(handles[idx].x, handles[idx].y);\n  if (idx === handles.length - 1) {\n    ctx.lineTo(handles[0].x, handles[0].y);\n  } else {\n    ctx.lineTo(handles[idx + 1].x, handles[idx + 1].y);\n  }\n  ctx.stroke();\n}\n\nexport function checkProximity(\n  handles: Array<HandleProps>,\n  handle: { x: number; y: number },\n  proximity: number\n) {\n  const near = handles.filter(\n    (pos) =>\n      Math.abs(pos.x - handle.x) < proximity &&\n      Math.abs(pos.y - handle.y) < proximity\n  );\n  if (near.length > 0) return true;\n\n  return false;\n}\n\nexport function cropImage(\n  imageCanvasRef: React.RefObject<HTMLCanvasElement>,\n  cropCanvasRef: React.RefObject<HTMLCanvasElement>,\n  handles: Array<HandleProps>\n) {\n  if (cropCanvasRef.current && imageCanvasRef.current) {\n    const imageCtx = imageCanvasRef.current.getContext('2d');\n    const ctx = cropCanvasRef.current.getContext('2d');\n    if (ctx && imageCtx) {\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      ctx.save();\n      ctx.beginPath();\n      handles.forEach((_, idx) => {\n        if (idx === handles.length - 1) {\n          ctx.lineTo(handles[0].x, handles[0].y);\n        } else {\n          ctx.lineTo(handles[idx + 1].x, handles[idx + 1].y);\n        }\n      });\n      ctx.clip();\n      ctx.drawImage(\n        imageCtx.canvas,\n        0,\n        0,\n        imageCtx.canvas.width,\n        imageCtx.canvas.height,\n        0,\n        0,\n        ctx.canvas.width,\n        ctx.canvas.height\n      );\n      ctx.restore();\n    }\n  }\n}\n\nexport function redrawCropped(\n  handles: Array<HandleProps>,\n  cropCanvasRef: React.RefObject<HTMLCanvasElement>,\n  finalCanvasRef: React.RefObject<HTMLCanvasElement>\n) {\n  if (finalCanvasRef.current && cropCanvasRef.current) {\n    const maxWidth = Math.max.apply(\n      null,\n      handles.map((pos) => pos.x)\n    );\n    const minWidth = Math.min.apply(\n      null,\n      handles.map((pos) => pos.x)\n    );\n    const maxHeight = Math.max.apply(\n      null,\n      handles.map((pos) => pos.y)\n    );\n    const minHeight = Math.min.apply(\n      null,\n      handles.map((pos) => pos.y)\n    );\n    const finalWidth = maxWidth - minWidth;\n    const finalHeight = maxHeight - minHeight;\n\n    const finalCanvas = finalCanvasRef.current;\n    const cropCanvas = cropCanvasRef.current;\n\n    finalCanvas.width = finalWidth;\n    finalCanvas.height = finalHeight;\n    const finalCtx = finalCanvas.getContext('2d');\n    finalCtx?.drawImage(\n      cropCanvas,\n      minWidth,\n      minHeight,\n      finalWidth,\n      finalHeight,\n      0,\n      0,\n      finalWidth,\n      finalHeight\n    );\n    clearCanvas(cropCanvasRef);\n  }\n}\n\nexport function clearCanvas(canvasRef: React.RefObject<HTMLCanvasElement>) {\n  if (canvasRef.current) {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx?.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  }\n}\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import * as jsxRuntime from \"/Users/gabriela/Projects/react-polygon-image-cropper/node_modules/react/jsx-runtime.js\"\nexport const jsx = jsxRuntime.jsx\nexport const jsxs = jsxRuntime.jsxs\nexport const Fragment = jsxRuntime.Fragment","import React, { useState } from 'react';\nimport './Handle.css';\n\nexport interface HandleProps {\n  x: number;\n  y: number;\n  radius: number;\n  color: string;\n}\n\ninterface ComponentProps extends HandleProps {\n  idx: number;\n  updateHandles: (idx: number, x: number, y: number) => void;\n  draggable: boolean;\n  cropCanvasRef: React.RefObject<HTMLCanvasElement>;\n}\nexport const Handle = ({\n  idx,\n  updateHandles,\n  draggable,\n  cropCanvasRef,\n  x,\n  y,\n  radius,\n  color,\n}: ComponentProps) => {\n  const [center, setCenter] = useState({\n    x: x - radius / 2,\n    y: y - radius / 2,\n  });\n\n  const calculateNewHandlePosition = (e: React.MouseEvent<HTMLDivElement>) => {\n    const rect = cropCanvasRef?.current?.getBoundingClientRect();\n    let newX = e.clientX;\n    let newY = e.clientY;\n    if (rect) {\n      newX -= rect.left;\n      newY -= rect.top;\n    }\n    updateHandles(idx, newX, newY);\n    setCenter({ x: newX - radius / 2, y: newY - radius / 2 });\n  };\n\n  const handleDrag = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    calculateNewHandlePosition(e);\n  };\n\n  return (\n    <div\n      draggable={`${draggable}`}\n      onDrag={handleDrag}\n      onDragStart={(e) => !draggable && e.preventDefault()}\n      className=\"handle\"\n      style={{\n        top: center.y,\n        left: center.x,\n        width: radius,\n        height: radius,\n        backgroundColor: color,\n      }}></div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport {\n  checkProximity,\n  clearCanvas,\n  cropImage,\n  drawLine,\n  redrawCropped,\n} from '../../utils';\nimport { Handle, HandleProps } from '../Handle/Handle';\nimport './Canvas.css';\n\ntype CustomCallbackProps = (\n  imageCanvasRef: React.RefObject<HTMLCanvasElement>,\n  cropCanvasRef: React.RefObject<HTMLCanvasElement>,\n  finalCanvasRef: React.RefObject<HTMLCanvasElement>\n) => unknown;\n\ntype UpdateHandlesCallbackProps = (handles: Array<HandleProps>) => unknown;\n\ninterface EventListenerProps {\n  elementRef: React.RefObject<HTMLElement>;\n  eventType: string;\n}\n\ninterface SaveProps {\n  saveRef: React.RefObject<HTMLElement>;\n  saveCallback: (imageUrl: string) => any;\n}\n\ninterface CanvasProps {\n  width: number;\n  height: number;\n  source: string;\n  radius: number;\n  color: string;\n  draggable?: boolean;\n  proximity?: number;\n  cropEvent?: EventListenerProps;\n  resetEvent?: EventListenerProps;\n  rescaleEvent?: EventListenerProps;\n  saveProps?: SaveProps;\n  styles?: React.CSSProperties;\n  customCallback?: CustomCallbackProps;\n  updateHandlesCallback?: UpdateHandlesCallbackProps;\n}\n\nconst Canvas = ({\n  width,\n  height,\n  source,\n  radius,\n  color,\n  draggable = true,\n  proximity,\n  cropEvent,\n  resetEvent,\n  rescaleEvent,\n  saveProps,\n  styles,\n  customCallback,\n  updateHandlesCallback,\n}: CanvasProps) => {\n  const imageCanvasRef = useRef<HTMLCanvasElement>(null);\n  const cropCanvasRef = useRef<HTMLCanvasElement>(null);\n  const finalCanvasRef = useRef<HTMLCanvasElement>(null);\n  const [handles, setHandles] = useState<Array<HandleProps>>([]);\n  const [cropped, setCropped] = useState(false);\n  const [scaled, setScaled] = useState(false);\n\n  useEffect(() => {\n    if (customCallback) {\n      customCallback(imageCanvasRef, cropCanvasRef, finalCanvasRef);\n    }\n  }, []);\n\n  useEffect(() => {\n    const handleCrop = () => {\n      cropImage(imageCanvasRef, cropCanvasRef, handles);\n      setCropped(true);\n    };\n    const cropRef = cropEvent?.elementRef;\n    if (cropRef && cropRef.current) {\n      cropRef.current.addEventListener('click', handleCrop);\n    }\n    return () => cropRef?.current?.removeEventListener('click', handleCrop);\n  }, [cropEvent, handles]);\n\n  useEffect(() => {\n    const handleReset = () => {\n      clearCanvas(cropCanvasRef);\n      clearCanvas(finalCanvasRef);\n      setHandles([]);\n      setCropped(false);\n      setScaled(false);\n    };\n    const resetRef = resetEvent?.elementRef;\n    if (resetRef && resetRef.current) {\n      resetRef.current.addEventListener('click', handleReset);\n    }\n    return () => resetRef?.current?.removeEventListener('click', handleReset);\n  }, [resetEvent]);\n\n  useEffect(() => {\n    const handleScale = () => {\n      if (!scaled) {\n        redrawCropped(handles, cropCanvasRef, finalCanvasRef);\n        setHandles([]);\n        setScaled(true);\n      }\n    };\n    const rescaleRef = rescaleEvent?.elementRef;\n    if (rescaleRef && rescaleRef.current) {\n      rescaleRef.current.addEventListener('click', handleScale);\n    }\n    return () => rescaleRef?.current?.removeEventListener('click', handleScale);\n  }, [rescaleEvent, handles, scaled]);\n\n  useEffect(() => {\n    if (saveProps) {\n      const saveRef = saveProps.saveRef;\n      const handleSave = () => {\n        const imageUrl = finalCanvasRef.current?.toDataURL('image/png');\n        if (imageUrl) {\n          saveProps.saveCallback(imageUrl);\n        }\n      };\n      if (saveRef && saveRef.current) {\n        saveRef.current.addEventListener('click', handleSave);\n      }\n\n      return () => saveRef?.current?.removeEventListener('click', handleSave);\n    }\n  }, [saveProps]);\n\n  useEffect(() => {\n    const canvas = imageCanvasRef.current;\n    if (canvas) {\n      canvas.width = width * window.devicePixelRatio;\n      canvas.height = height * window.devicePixelRatio;\n      const context = canvas.getContext('2d');\n      if (context) {\n        const image = new Image();\n        image.onload = function () {\n          context.imageSmoothingEnabled = false;\n          context.drawImage(\n            image,\n            0,\n            0,\n            image.width * window.devicePixelRatio,\n            image.height * window.devicePixelRatio,\n            0,\n            0,\n            canvas.width,\n            canvas.height\n          );\n        };\n        image.src = source;\n      }\n    }\n\n    const handleCanvas = cropCanvasRef.current;\n    if (handleCanvas) {\n      handleCanvas.width = width;\n      handleCanvas.height = height;\n    }\n  }, [source]);\n\n  useEffect(() => {\n    const cropCanvas = cropCanvasRef.current;\n    if (cropCanvas) {\n      const cropContext = cropCanvas.getContext('2d');\n      if (cropped) {\n        cropImage(imageCanvasRef, cropCanvasRef, handles);\n      } else {\n        cropContext?.clearRect(0, 0, cropCanvas.width, cropCanvas.height);\n        handles.forEach((_, idx) => drawLine(handles, idx, cropContext));\n      }\n    }\n  }, [handles, cropped]);\n\n  const handleClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    e.preventDefault();\n    const cropCanvas = cropCanvasRef.current;\n    if (cropCanvas) {\n      const rect = cropCanvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      if (\n        !checkProximity(handles, { x: x, y: y }, proximity || 0) &&\n        !cropped\n      ) {\n        setHandles((prev) => [\n          ...prev,\n          { x: x, y: y, radius: radius, color: color },\n        ]);\n      }\n    }\n  };\n\n  const updateHandles = (idx: number, x: number, y: number) => {\n    const handlesCopy = Array.from(handles);\n    handlesCopy[idx] = { ...handlesCopy[idx], x: x, y: y };\n    setHandles(handlesCopy);\n    if (updateHandlesCallback) updateHandlesCallback(handlesCopy);\n  };\n\n  return (\n    <div\n      className=\"react-polygon-bounding-box\"\n      style={{ height: height, width: width, ...styles }}>\n      <canvas\n        style={{ height: height, width: width }}\n        className=\"react-polygon-image-canvas\"\n        hidden={cropped}\n        ref={imageCanvasRef}\n      />\n      <canvas\n        style={{ height: height, width: width }}\n        className=\"react-polygon-crop-canvas\"\n        ref={cropCanvasRef}\n        onClick={handleClick}\n      />\n      <canvas className=\"react-polygon-final-canvas\" ref={finalCanvasRef} />\n      {handles.map((handle, idx) => (\n        <Handle\n          key={idx}\n          idx={idx}\n          {...handle}\n          updateHandles={updateHandles}\n          draggable={draggable}\n          cropCanvasRef={cropCanvasRef}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Canvas;\n"],"names":["require$$0","jsxRuntimeModule","jsxRuntime.jsx","jsxRuntime.jsxs","Handle","idx","updateHandles","draggable","cropCanvasRef","x","y","radius","color","center","setCenter","useState","calculateNewHandlePosition","e","rect","current","getBoundingClientRect","newX","clientX","newY","clientY","left","top","handleDrag","preventDefault","width","height","backgroundColor","Canvas","source","proximity","cropEvent","resetEvent","rescaleEvent","saveProps","styles","customCallback","updateHandlesCallback","imageCanvasRef","useRef","finalCanvasRef","handles","setHandles","cropped","setCropped","scaled","setScaled","useEffect","handleCrop","cropRef","elementRef","addEventListener","removeEventListener","handleReset","clearCanvas","resetRef","handleScale","rescaleRef","saveRef","handleSave","imageUrl","toDataURL","saveCallback","canvas","window","devicePixelRatio","context","getContext","image","Image","onload","imageSmoothingEnabled","drawImage","src","handleCanvas","cropCanvas","cropContext","clearRect","forEach","_","drawLine","handleClick","checkProximity","prev","handlesCopy","Array","from","_jsx","map","handle"],"mappings":"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"}